#!/usr/bin/python3

# (nvim integration)
# Extracts the nearest URL to the cursor by parsing the line
# the cursor is currently on and the cursor's position in the line

import re
import shlex
import sys

url_patterns = (
    r"\[.*?\]\((\S+?)\)",  # Markdown link
    r"<(\S+?)>",  # Angle brackets
    r"\\href\{(\S+?)\}\{.*?\}",  # LaTeX \href{}{}
    r"(http[s]?://\S+)",  # Plain URLs with protocol
    r"(\b\S+\.\S+)\b",  # Plain URLs without protocol
)

def extract_nearest_url(line, cursor_pos):
    # Regular expression to extract URLs
    pattern = "|".join(url_patterns)
    matches = re.finditer(pattern, line)

    closest_url = None
    min_distance = float("inf")

    # Extract URL
    for match in matches:
        url = next((group for group in match.groups() if group), None)

        # Calculate distances to cursor position
        start_pos = match.start()
        end_pos = match.end()
        distance = min(abs(cursor_pos - start_pos), abs(cursor_pos - end_pos))

        # Update closest URL
        if distance < min_distance:
            min_distance = distance
            # Clean the URL by removing any trailing punctuation and whitespace
            cleaned_url = re.sub(r"[),.\s]*$", "", url)
            closest_url = shlex.quote(cleaned_url)

    return closest_url if closest_url else ""

line = " ".join(sys.argv[1:-1]) if len(sys.argv) > 1 else ""
try:
    cursor_pos = int(sys.argv[-1])
except ValueError:
    sys.exit("Error: Cursor position must be an integer")
url = extract_nearest_url(line, cursor_pos)

# Print without additional newline
print(url, end="")
